diff --git a/addons/mail/controllers/main.py b/addons/mail/controllers/main.py
index 4ecd87d3..165e23be 100644
--- a/addons/mail/controllers/main.py
+++ b/addons/mail/controllers/main.py
@@ -128,10 +128,12 @@ class MailController(http.Controller):
 
     @http.route('/mail/read_followers', type='json', auth='user')
     def read_followers(self, res_model, res_id):
+        record = request.env[res_model].browse(res_id)
+        company = record.my_company()
         request.env['mail.followers'].check_access_rights("read")
-        request.env[res_model].check_access_rights("read")
-        request.env[res_model].browse(res_id).check_access_rule("read")
-        follower_recs = request.env['mail.followers'].search([('res_model', '=', res_model), ('res_id', '=', res_id)])
+        record.check_access_rights("read")
+        record.with_my_company().check_access_rule("read")
+        follower_recs = request.env['mail.followers'].with_company(company).search([('res_model', '=', res_model), ('res_id', '=', res_id)])
 
         followers = []
         follower_id = None
@@ -290,7 +292,7 @@ class MailController(http.Controller):
         records = request.env[model].browse(res_ids)
         try:
             records.check_access_rule('read')
-            records.check_access_rights('read')
+            records.with_my_company().check_access_rights('read')
         except:
             return {}
         return records._message_get_suggested_recipients()
diff --git a/addons/mail/models/mail_activity.py b/addons/mail/models/mail_activity.py
index 26e07e00..0e7a133a 100644
--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -830,7 +830,7 @@ class MailActivityMixin(models.AbstractModel):
             SELECT 1 AS id, count(*) AS "__count", {fields}
             FROM {from_clause}
             JOIN (
-                SELECT res_id,
+                SELECT mail_activity.res_id,
                 CASE
                     WHEN min(date_deadline - (now() AT TIME ZONE COALESCE(res_partner.tz, %s))::date) > 0 THEN 'planned'
                     WHEN min(date_deadline - (now() AT TIME ZONE COALESCE(res_partner.tz, %s))::date) < 0 THEN 'overdue'
@@ -839,9 +839,10 @@ class MailActivityMixin(models.AbstractModel):
                 END AS activity_state
                 FROM mail_activity
                 JOIN res_users ON (res_users.id = mail_activity.user_id)
-                JOIN res_partner ON (res_partner.id = res_users.partner_id)
+                LEFT JOIN ir_property ON res_users.id = ir_property.user_id AND ir_property.company_id = {company_id}
+                LEFT JOIN res_partner ON res_partner.id = ir_property.partner_id
                 WHERE res_model = '{model}'
-                GROUP BY res_id
+                GROUP BY mail_activity.res_id
             ) AS "_last_activity_state" ON ("{table}".id = "_last_activity_state".res_id)
             WHERE {where_clause}
             GROUP BY {group_by}
@@ -852,6 +853,7 @@ class MailActivityMixin(models.AbstractModel):
             table=self._table,
             where_clause=where_clause or '1=1',
             group_by=', '.join(groupby_terms),
+            company_id=self.env.company.id,
         )
         self.env.cr.execute(select_query, [tz] * 3 + where_params)
         fetched_data = self.env.cr.dictfetchall()
diff --git a/addons/mail/models/mail_followers.py b/addons/mail/models/mail_followers.py
index e584b87d..168c32a5 100644
--- a/addons/mail/models/mail_followers.py
+++ b/addons/mail/models/mail_followers.py
@@ -139,7 +139,9 @@ SELECT DISTINCT ON(pid, cid) * FROM (
             partner.active as active, partner.partner_share as pshare, NULL as ctype,
             users.notification_type AS notif, array_agg(groups.id) AS groups
         FROM res_partner partner
-        LEFT JOIN res_users users ON users.partner_id = partner.id AND users.active
+        LEFT JOIN ir_property property ON partner.id = property.partner_id
+        LEFT JOIN res_users users ON users.id = property.user_id
+            AND users.active
         LEFT JOIN res_groups_users_rel groups_rel ON groups_rel.uid = users.id
         LEFT JOIN res_groups groups ON groups.id = groups_rel.gid
         WHERE EXISTS (
@@ -175,7 +177,8 @@ SELECT partner.id as pid, NULL::int AS cid,
     partner.active as active, partner.partner_share as pshare, NULL as ctype,
     users.notification_type AS notif, NULL AS groups
 FROM res_partner partner
-LEFT JOIN res_users users ON users.partner_id = partner.id AND users.active
+LEFT JOIN ir_property property ON partner.id = property.partner_id
+LEFT JOIN res_users users ON users.id = property.user_id AND users.active
 WHERE partner.id IN %s"""
                 params.append(tuple(pids))
             if cids:
diff --git a/addons/mail/models/res_users.py b/addons/mail/models/res_users.py
index bd4a3f5b..7f77d507 100644
--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -96,6 +96,18 @@ GROUP BY channel_moderator.res_users_id""", [tuple(self.ids)])
             self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)])._subscribe_users()
         elif sel_groups:
             self.env['mail.channel'].search([('group_ids', 'in', sel_groups)])._subscribe_users()
+        # TODO If changes in both vals['groups_id'] and sel_groups, will the user be subscribed based on sel_groups also? If not, then FIX above.
+        if vals.get('partner_id') or (vals.get('name') and vals.get('lang')):
+            # Probably a new partner
+            channels = self.env['mail.channel']
+            if vals.get('groups_id'):
+                user_group_ids = [command[1] for command in vals['groups_id'] if command[0] == 4]
+                user_group_ids += [id for command in vals['groups_id'] if command[0] == 6 for id in command[2]]
+                channels = channels | self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)])
+            if sel_groups:
+                channels = channels | self.env['mail.channel'].search([('group_ids', 'in', sel_groups)])
+            if channels:
+                channels._subscribe_users()
         return write_res
 
     def unlink(self):
