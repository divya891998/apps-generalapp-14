diff --git a/odoo/addons/base/__init__.py b/odoo/addons/base/__init__.py
index bba00903..cd3a7ebb 100644
--- a/odoo/addons/base/__init__.py
+++ b/odoo/addons/base/__init__.py
@@ -6,8 +6,60 @@ from . import models
 from . import populate
 from . import report
 from . import wizard
+from odoo import api, SUPERUSER_ID
+from openupgradelib import openupgrade
+from psycopg2 import sql
 
 
+def pre_init(cr):
+    """user.partner_id -> company_dependent"""
+
+    if openupgrade.column_exists(cr, 'res_users', 'partner_id'):
+        env = api.Environment(cr, SUPERUSER_ID, {})
+
+        rename_fields = [
+            ('res.users', 'res_users', 'partner_id', 'temp_partner_id'),
+        ]
+        openupgrade.rename_fields(env, rename_fields, no_deep=True)
+
+        add_fields = [
+            ('partner_id', 'res.users', 'res_users', 'integer', 'int4', 'base'),
+            ('user_id', 'ir.property', 'ir_property', 'many2one', 'int4', 'base'),
+            ('partner_id', 'ir.property', 'ir_property', 'many2one', 'int4', 'base'),
+        ]
+        openupgrade.add_fields(env, add_fields)
+
+        cr.execute("SELECT id FROM ir_model_fields "
+                "WHERE name='partner_id' AND model='res.users'")
+        fields_id = cr.fetchone()[0]
+        openupgrade.logged_query(
+            cr,
+            sql.SQL("""
+                INSERT INTO ir_property (
+                    fields_id, company_id, name, type, res_id, user_id, value_reference, partner_id
+                )
+                SELECT
+                    {fields_id}, company_id,
+                    'partner_id', 'many2one',
+                    'res.users,' || id::TEXT, id,
+                    'res.partner,' || temp_partner_id::TEXT, temp_partner_id
+                FROM res_users
+                WHERE temp_partner_id IS NOT NULL
+                AND company_id IS NOT NULL;
+                """.format(fields_id=str(fields_id))
+            )
+        )
+
+        openupgrade.logged_query(
+            cr,
+            sql.SQL("""
+                ALTER TABLE res_users
+                DROP CONSTRAINT IF EXISTS res_users_partner_id_fkey,
+                DROP COLUMN partner_id;
+            """))
+
+        #openupgrade.drop_columns([('res_users', 'temp_partner_id')]) # How to drop the whole field?
+
 def post_init(cr, registry):
     """Rewrite ICP's to force groups"""
     from odoo import api, SUPERUSER_ID
diff --git a/odoo/addons/base/__manifest__.py b/odoo/addons/base/__manifest__.py
index 8ca87a20..989337bf 100644
--- a/odoo/addons/base/__manifest__.py
+++ b/odoo/addons/base/__manifest__.py
@@ -85,6 +85,8 @@ The kernel of Odoo, needed for all installation.
     'test': [],
     'installable': True,
     'auto_install': True,
+    'external_dependencies': {'python': ['openupgradelib']},
+    'pre_init_hook': 'pre_init',
     'post_init_hook': 'post_init',
     'license': 'LGPL-3',
 }
diff --git a/odoo/addons/base/data/base_data.sql b/odoo/addons/base/data/base_data.sql
index 2e295332..bd97cc38 100644
--- a/odoo/addons/base/data/base_data.sql
+++ b/odoo/addons/base/data/base_data.sql
@@ -20,7 +20,6 @@ CREATE TABLE res_users (
     -- No FK references below, will be added later by ORM
     -- (when the destination rows exist)
     company_id integer, -- references res_company,
-    partner_id integer, -- references res_partner,
     create_date timestamp without time zone,
     primary key(id)
 );
@@ -136,7 +135,7 @@ insert into res_partner (id, name, company_id, create_date) VALUES (1, 'My Compa
 insert into ir_model_data (name, module, model, noupdate, res_id) VALUES ('main_partner', 'base', 'res.partner', true, 1);
 select setval('res_partner_id_seq', 1);
 
-insert into res_users (id, login, password, active, partner_id, company_id, create_date) VALUES (1, '__system__', NULL, false, 1, 1, now() at time zone 'UTC');
+insert into res_users (id, login, password, active, company_id, create_date) VALUES (1, '__system__', NULL, false, 1, now() at time zone 'UTC');
 insert into ir_model_data (name, module, model, noupdate, res_id) VALUES ('user_root', 'base', 'res.users', true, 1);
 select setval('res_users_id_seq', 1);
 
diff --git a/odoo/addons/base/models/ir_property.py b/odoo/addons/base/models/ir_property.py
index cc2aa3cf..e3874bc9 100644
--- a/odoo/addons/base/models/ir_property.py
+++ b/odoo/addons/base/models/ir_property.py
@@ -60,6 +60,21 @@ class Property(models.Model):
                             default='many2one',
                             index=True)
 
+    user_id = fields.Integer("The User", compute='_compute_user_partner_id', store=True, index=True,
+        help="user_id and partner_id are necessary to join res.users with company_dependent res.partner using standard query.")
+    partner_id = fields.Integer("The Company Partner", compute='_compute_user_partner_id', store=True, index=True,
+        help="user_id and partner_id are necessary to join res.users with company_dependent res.partner using standard query.")
+
+    @api.depends('res_id', 'value_reference')
+    def _compute_user_partner_id(self):
+        for record in self:
+            if record.res_id[:9] == 'res.users' and record.value_reference[:11] == 'res.partner' and record.name == 'partner_id':
+                record.user_id = int(record.res_id.split(',')[1])
+                record.partner_id = int(record.value_reference.split(',')[1])
+            else:
+                record.user_id = None
+                record.partner_id = None
+
     def init(self):
         # Ensure there is at most one active variant for each combination.
         query = """
diff --git a/odoo/addons/base/models/res_users.py b/odoo/addons/base/models/res_users.py
index a6a5f7cc..3fb8dd0b 100644
--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -282,6 +282,7 @@ class Users(models.Model):
         return image_process(image, colorize=True)
 
     partner_id = fields.Many2one('res.partner', required=True, ondelete='restrict', auto_join=True,
+        company_dependent=True,
         string='Related Partner', help='Partner-related data of the user')
     login = fields.Char(required=True, help="Used to log into the system")
     password = fields.Char(
@@ -570,11 +571,6 @@ class Users(models.Model):
                 self = self.sudo().with_context(binary_field_real_user=self.env.user)
 
         res = super(Users, self).write(values)
-        if 'company_id' in values:
-            for user in self:
-                # if partner is global we keep it that way
-                if user.partner_id.company_id and user.partner_id.company_id.id != values['company_id']:
-                    user.partner_id.write({'company_id': user.company_id.id})
 
         if 'company_id' in values or 'company_ids' in values:
             # Reset lazy properties `company` & `companies` on all envs
@@ -1001,6 +997,69 @@ class Users(models.Model):
     def _mfa_url(self):
         """ If an MFA method is enabled, returns the URL for its second step. """
         return
+
+    # SQL join; res.users _inherits company_dependent res.parter
+    def _inherits_query_left_join(self, query, lhs_alias, lhs_column, rhs_table, rhs_column, link, extra=None, extra_params=()):
+        property_alias = query.left_join(
+            'res_users',
+            'id',
+            'ir_property',
+            'user_id',
+            'property_id',
+            "res_users__property_id.partner_id is not null AND res_users__property_id.company_id = {}".format(self.env.company.id),
+        )
+        parent_alias = query.left_join(
+            'res_users__property_id',
+            'partner_id',
+            'res_partner',
+            'id',
+            'partner_id',
+        )
+        return parent_alias
+
+    # copied from ORM, using _inherits_query_left_join
+    def _inherits_join_add(self, current_model, parent_model_name, query):
+        """
+        Add missing table SELECT and JOIN clause to ``query`` for reaching the parent table (no duplicates)
+        :param current_model: current model object
+        :param parent_model_name: name of the parent model for which the clauses should be added
+        :param query: query object on which the JOIN should be added
+        """
+        inherits_field = current_model._inherits[parent_model_name]
+        parent_model = self.env[parent_model_name]
+        parent_alias = self._inherits_query_left_join(query,
+            current_model._table, inherits_field, parent_model._table, 'id', inherits_field,
+        )
+        return parent_alias
+
+    # copied from ORM, using _inherits_query_left_join
+    @api.model
+    def _inherits_join_calc(self, alias, fname, query):
+        """
+        Adds missing table select and join clause(s) to ``query`` for reaching
+        the field coming from an '_inherits' parent table (no duplicates).
+        :param alias: name of the initial SQL alias
+        :param fname: name of inherited field to reach
+        :param query: query object on which the JOIN should be added
+        :return: qualified name of field, to be used in SELECT clause
+        """
+        # INVARIANT: alias is the SQL alias of model._table in query
+        model, field = self, self._fields[fname]
+        while field.inherited:
+            # retrieve the parent model where field is inherited from
+            parent_model = self.env[field.related_field.model_name]
+            parent_fname = field.related[0]
+            # JOIN parent_model._table AS parent_alias ON alias.parent_fname = parent_alias.id
+            parent_alias = self._inherits_query_left_join(query,
+                alias, parent_fname, parent_model._table, 'id', parent_fname,
+            )
+            model, alias, field = parent_model, parent_alias, field.related_field
+        # handle the case where the field is translated
+        if field.translate is True:
+            return model._generate_translated_field(alias, fname, query)
+        else:
+            return '"%s"."%s"' % (alias, fname)
+
 #
 # Implied groups
 #
